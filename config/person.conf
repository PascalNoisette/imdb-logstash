input { 
    gunzip {
        path => ["./log/actors.list.gz"]
        head => 241
        delimiter => "-----------------------------------------------------------------------------"
        codec => plain {
                charset => "CP1252"
        }
    }
    gunzip {
        path => ["./log/composers.list.gz"]
        head => 241
        delimiter => "-----------------------------------------------------------------------------"
        codec => plain {
                charset => "CP1252"
        }
    }
    gunzip {
        path => ["./log/actresses.list.gz"]
        head => 242
        delimiter => "-----------------------------------------------------------------------------"
        codec => plain {
                charset => "CP1252"
        }
    }
    gunzip {
        path => ["./log/cinematographers.list.gz"]
        head => 232
        delimiter => "-----------------------------------------------------------------------------"
        codec => plain {
                charset => "CP1252"
        }
    }
    gunzip {
        path => ["./log/costume-designers.list.gz"]
        head => 232
        delimiter => "-----------------------------------------------------------------------------"
        codec => plain {
                charset => "CP1252"
        }
    }
    gunzip {
        path => ["./log/directors.list.gz"]
        head => 236
        delimiter => "-----------------------------------------------------------------------------"
        codec => plain {
                charset => "CP1252"
        }
    }
    gunzip {
        path => ["./log/distributors.list.gz"]
        head => 15
        delimiter => "--------------------------------------------------------------------------------"
        codec => plain {
                charset => "CP1252"
        }
    }
    gunzip {
        path => ["./log/editors.list.gz"]
        head => 149
        delimiter => "-----------------------------------------------------------------------------"
        codec => plain {
                charset => "CP1252"
        }
    }
    gunzip {
        path => ["./log/producers.list.gz"]
        head => 220
        delimiter => "-----------------------------------------------------------------------------"
        codec => plain {
                charset => "CP1252"
        }
    }
    gunzip {
        path => ["./log/writers.list.gz"]
        head => 303
        delimiter => "-----------------------------------------------------------------------------"
        codec => plain {
                charset => "CP1252"
        }
    }
}

filter {
    multiline {
        pattern => "\t\t\t"
        what => previous
    }
    
    mutate {
        strip => ["message"]
        gsub => [ 
            "message", "\n", "	",
            "message", "\t\t\t", "	",
            "message", "\t\t", "	"
        ]
    }
    grok {
        patterns_dir => [ "patterns" ]
        match => [ "message", "%{IMDB_ACTOR_NAME_HEADING:person_name}\t%{IMDB_ACTOR_ROLE_DETAILS:details}" ]
    }
    grok {
        patterns_dir => [ "patterns" ]
        match => [ "person_name", "%{IMDB_ACTOR_NAME:lastname}(, %{IMDB_ACTOR_NAME:firstname})?(\(%{IMDB_ACTOR_AMBIGUOUS:ambiguous}\))?" ]
    }
    grok {
        patterns_dir => [ "patterns" ]
        match => [ "path", ".*/%{USERNAME:person}\.list.gz" ]
    }
    mutate {
        remove_field => ["host", "message", "path"]
        strip => ["lastname", "firstname"]
    }
    if [details] =~ /\t/ {
        split {
            field => "details"
            terminator => "	"
        }
    }
    if "_grokparsefailure"  in [tags] {
        drop { } 
    }
    mutate {
            remove_field => ["tags", "line_number"]
    }
}

filter {
    grok {
        patterns_dir => [ "patterns" ]
        match => [ "details", '(?<movie_title>%{IMDB_MOVIE_TITLE:title}(, %{IMDB_MOVIE_PRON:pro_title})?\(%{IMDB_MOVIE_DATE:release:int}\)( )?(\(%{IMDB_MOVIE_FORMAT:format}\))?)([ ]+)?(\{%{IMDB_ROLE_MUSTASHE:mustashe}\})?([ ]+)?(\[%{IMDB_ROLE_NAME:role}\])?([ ]+)?(<%{IMDB_ROLE_CREDIT_POS:position:int}>)?' ]
    }
    grok {
        patterns_dir => [ "patterns" ]
        match => [ "details", '  ' ]
    }
    mutate {
        remove_field => ["details", "@version"]
        strip => ["title", "pro_title", "movie_title"]
        gsub => [
            "title", '"', '',
            "pro_title", '"', ''
        ]
    }
}


output {
    if "_grokparsefailure"  not in [tags] {
      stdout { codec => rubydebug }
      #elasticsearch {}
    }

}